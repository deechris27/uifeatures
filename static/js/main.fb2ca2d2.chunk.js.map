{"version":3,"sources":["components/spin/spin.js","pages/HomePage.js","components/progress/progress.js","App.js","serviceWorker.js","index.js"],"names":["Spin","loaderStyle","useRef","contentStyle","useEffect","timerId","setTimeout","displayContent","timeOutCall","current","style","display","Fragment","className","ref","HomePage","textAlign","to","ProgressBar","pBar","i","onClick","width","setInterval","clearInterval","start","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yQAmCeA,MAhCf,WACI,IAAMC,EAAcC,mBACdC,EAAeD,mBASrBE,qBAAU,YAPU,WAChB,IAAMC,EAAUC,WAAWC,EAAgB,KAO3CC,MAGJ,IAAMD,EAAiB,WACnBN,EAAYQ,QAAQC,MAAMC,QAAU,OACpCR,EAAaM,QAAQC,MAAMC,QAAU,SAGzC,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAU,SAASC,IAAKb,IAE7B,yBAAKS,MAAO,CAAEC,QAAS,QAAUE,UAAU,UAAUC,IAAKX,GACtD,mDACA,oF,OChBDY,MAVf,WACI,OACI,yBAAKL,MAAO,CAACM,UAAW,WACpB,+CACA,kBAAC,IAAD,CAAMC,GAAG,SAAT,kBAAsC,6BACtC,kBAAC,IAAD,CAAMA,GAAG,aAAT,gBAAwC,+B,MCiCrCC,MApCf,WACI,IAAMC,EAAOjB,mBACTkB,EAAI,EAsBR,OACI,kBAAC,IAAMR,SAAP,KACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,MAAMC,IAAKK,KAE9B,6BACA,4BAAQE,QAAS,kBA3BV,WACX,GAAO,IAAJD,EAAM,CACLA,EAAI,EACJ,IAAIE,EAAQ,EACRjB,EAAUkB,aACd,WACOD,GAAO,KACNE,cAAcnB,GACde,EAAE,IAEFE,IACAH,EAAKV,QAAQC,MAAMY,MAAQA,EAAQ,OAPP,KAuBfG,KAArB,SAA6C,KAC7C,4BAAQJ,QAAS,WAVrBF,EAAKV,QAAQC,MAAMY,MAAQ,OAUvB,WCtBGI,EARH,kBACT,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWd,IACjC,kBAAC,IAAD,CAAOa,KAAK,QAAQC,UAAW7B,IAC/B,kBAAC,IAAD,CAAO4B,KAAK,YAAYC,UAAWX,MCEpBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACC,kBAAC,EAAD,QAGHC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fb2ca2d2.chunk.js","sourcesContent":["import React, {useRef, useEffect} from 'react';\r\nimport './spin.css';\r\n\r\nfunction Spin() {\r\n    const loaderStyle = useRef();\r\n    const contentStyle = useRef();\r\n\r\n    const timeOutCall = () => {\r\n        const timerId = setTimeout(displayContent, 3000);\r\n        return function () {\r\n            clearTimeout(timerId);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        timeOutCall();\r\n    });\r\n\r\n    const displayContent = () => {\r\n        loaderStyle.current.style.display = 'none';\r\n        contentStyle.current.style.display = 'block';\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"loader\" ref={loaderStyle} />\r\n\r\n            <div style={{ display: 'none' }} className=\"content\" ref={contentStyle}>\r\n                <h2>Hello Deeeee!!!!!!!</h2>\r\n                <p>Refresh.....What comes around goes around.........</p>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Spin;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction HomePage() {\r\n    return (\r\n        <div style={{textAlign: 'center'}}>\r\n            <h1>Hello Home Page</h1>\r\n            <Link to=\"/spin\">Spinner/Loader</Link><br />\r\n            <Link to=\"/progress\">Progress Bar</Link><br />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n","import React, {useRef} from 'react';\r\nimport './progress.css';\r\n\r\n\r\n\r\nfunction ProgressBar() {\r\n    const pBar = useRef();\r\n    let i = 0;\r\n     const start = () => {\r\n        if(i===0){\r\n            i = 1;\r\n            let width = 1;\r\n            let timerId = setInterval(progress, 10);\r\n            function progress() {\r\n                if(width>=100){\r\n                    clearInterval(timerId);\r\n                    i=0;\r\n                }else{\r\n                    width++;\r\n                    pBar.current.style.width = width + \"%\";\r\n                }\r\n            }\r\n        }\r\n     };\r\n\r\n     const clear = () => {\r\n        pBar.current.style.width = 0 + \"%\";\r\n     };\r\n     \r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"progress\">\r\n                <div className=\"bar\" ref={pBar} />\r\n            </div>\r\n            <br />\r\n            <button onClick={()=>start()}>Start</button>{\"\\t\"}\r\n            <button onClick={()=>clear()}>Clear</button>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ProgressBar;","import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport Spin from './components/spin/spin';\nimport HomePage from './pages/HomePage';\nimport ProgressBar from './components/progress/progress';\n\nconst App = ()=> (\n   <Switch>\n     <Route exact path=\"/\" component={HomePage} />\n     <Route path=\"/spin\" component={Spin} />\n     <Route path=\"/progress\" component={ProgressBar} />\n   </Switch>  \n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {HashRouter} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n     <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}